－－－－－－－－－开发规范－－－－－－－－－
服务器端分层如下:
ctrl:接收页面请求-->调用reqconverter（reqdto转dmo）-->调用blo层方法实现业务逻辑-->调用resconverter（dmo转resdto）-->返回
converter:属于ctrl层下的，主要负责dto与dmo之间的互相转换
blo:实现业务逻辑
repo:实现存储层逻辑，操作dmo对象。主要目的是屏蔽缓存逻辑（暂时还没有做），以有缓存逻辑为设计依据。
mapper:操作关系数据库，设计原则为一个表对应一个mapper。
searcher:操作搜索引擎，设计原则为一个表对应一个searcher。

数据模型如下:
dto是数据传输对象，仅用于ctrl层接口交互
dmo是领域对象，用于blo层及以下，代表业务数据
dto和dmo完全隔离，绝不互相引用，靠converter进行转换。

dto接口必须隔离，以后用工具通过接口文档自动生成
有时候你觉得dto的同样的一个字段可以复用，但实际上展现形式也可能不同，实践后的结论：接口隔离性大于复用
dmo尽量考虑复用

特殊数据类型：
金额dmo必须用Money类，dto整数Integer,小数String，框架会自动转换
日期dmo必须用DateTime类，dto就String，框架会自动转换
时间dmo必须用Time类，dto就String，框架会自动转换

如果存在通用的逻辑，必须考虑到是否可以放到toffee框架里，
目前toffee的util包里面有绝大多数的数据类型操作库，直接用，不要自己写。
例如：
字符串比较等操作必须用toffee包里的StringUtils类库。
集合操作必须用toffee包里的CollectionUtils类库。



－－－－－－－－－存储相关－－－－－－－－－
尽量避免联合查询

如果用like语句的时候必须考虑数据范围，一般应该避免这种查询，尽量走搜索引擎



－－－－－－－－－seo相关－－－－－－－－－
pc站，移动站url定义的时候，均采用rest风格，尽量避免.do这种，能用拼音尽量用，代替123等数字代码。




－－－－－－－－－常见问题－－－－－－－－－
字符串比较xxx == "yyy",这种写法只能用一个词形容：业余!
应该用StringUtils.equals

只从session里取UID和登录名，其他均需要从数据库里取，避免数据不一致

金额一定要记得，数据库存储的是分，到界面按需求转换成元（架构解决方案：添加Money类）

默认界面数据，均做了html转义，注意是否需要不转义。

数据库记得写操作要开事务，单一写操作可以不开
如果有多个写操作记得，一定要按照固定顺序，避免死锁
例如：事务1先更新A，再更新B，事务2先更新B，再更新A，则死锁

并发逻辑一定要考虑，可以依赖唯一键约束，或者行锁（锁开销看性能是否可接受来评估）之类的。
例如：删除店铺的时候，查出所有套系，一个一个删除套系，再删除店铺
会导致同时删除完套系之后再有套系插入，则会漏掉一个套系没删除，同时该套系还没有了店铺。
解决办法主要是根据店铺ID一次删除一批套系，不要先查再删，因为查的不准（在并发的时候）。


